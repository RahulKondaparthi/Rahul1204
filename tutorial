1)How can I get the list of files in a directory using C/C++?
  #include<stdio.h>
  int main()
  {
   char command[20] = "ls -l";
   system(command);
   return 0;
   }
   
2) How to debug a core in C/C++?
 A process dumps core when it is terminated by operating system due to fault in program.
 The most common fault is that program accessing invalid pointer(NNULL) or value out area of memory..It is useful for debugging.
 The core is dumped to the /proc/sys/kernel directory by default. To debug a core, the program must be compiled with the -g option. 
 
3)Segmentation fault ?
  A segmentation fault occurs when a program aacees to memory(beyond the limits) that is not allowed by operating system.
         Accessing an array out of bounds.(indexed array where the index is outside of the array bounds)
         Dereferencing NULL pointers
         Dereferencing freed memory
         Dereferencing uninitialized pointers
         Incorrect use of the "&" (address of) and "*" (dereferencing) operators
         Improper formatting specifiers in printf and scanf statements
         Stack overflow
         Writing to read-only memory

4) compilation process in C?
  Pre-processing
  Compilation
  Assembly
  Linking                            P                     C                       A            L
               File---->Filenmae.c----->Filename.i---------->Filename.s-------------->Filename.o

  Pre-processing:
            Removal of Comments
            Expansion of Macros
            Expansion of the included files.
            Conditional compilation            
   The preprocessed output is stored in the filename.i

 Compilation:
 The next step is to compile filename.i and produce an; intermediate compiled output file filename.s. 
 This file is in assembly level instructions. 

  Assembler:
  In this phase the filename.s is taken as input and turned into filename.o by assembler.
  This file contain machine level instructions.

 Linking
 This is the final phase in which all the linking of function calls with their definitions are done. 
 Linker knows where all these functions are implemented.
 Linker does some extra work also, it adds some extra code to our program which is required when the program starts and ends.
 
5) How to convert a string to a integer in C 
  #include<stdio.h>
  #include<string.h>

  int main () {
    char *name="The Matrix(1999)";
    char *p;
          p = strchr(name,'(');
    char result_string[5]="";
    int i;
    for(i=1;i < strlen(p+1);i++)
    {
       result_string[i-1]= p[i];
    }
    result_string[i]='\0';
   
    int s = atoi(result_string);
    printf("%d",s);
    return 0;
}

6) Count spaces, uppercase and lowercase in a sentence using C?
   #include<stdio.h>
   int main() {
    char str[100],i;
    int upper = 0, lower = 0, number = 0, special = 0,whitesp=0;
    printf("enter string");
    gets(str);
    for (i = 0; i < str[i]!='\0'; i++) {
         if (str[i] >= 'A' && str[i] <= 'Z')
         upper++;
         else if (str[i] >= 'a' && str[i] <= 'z')
         lower++;
         else if (str[i]>= '0' && str[i]<= '9')
         number++;
         else if(str[i]==' ')
         whitesp++;
         else
         special++;
     }
     printf("Upper case letters: %d\n",upper);
     printf("lower case letters: %d\n",lower);
     printf("Numbers: %d\n",number);
     printf("whitespace: %d\n",whitesp);
     printf("sp chararcter: %d\n",special);
   return 0;
}

7) typecasting in C?
  #include <stdio.h>
  int main() {
    float c = 5.55;
    int s = (int)c+1;
    printf("Explicit Conversion : %d\n",s);
    return 0;
}
8)storage classes?
   auto: or local varibles;
   Auto storage class is the default storage class for all the local variables. It is created when function is called. 
   When the execution of function is completed, variables are destroyed automatically.
       Scope − auto variables are local variables to the function block.
       Default value − Garbage value is the default initialized value.
       Lifetime − Lifetime of auto variable is bound by the block in which it is defined
 
 
   extern
   External variables are also known as global variables. These variables are defined outside the function. 
   These variables are available globally throughout the function execution. The value of global variables can be modified by the functions.
        Scope − They are not bound by any function. They are everywhere in the program i.e. global.
        Default value − Default initialized value of global variables are Zero.
        Lifetime − Till the end of the execution of the program.
   
   static
   Static variables are initialized only once. Compiler persist the variable till the end of the program. Static variable can be defined inside or outside the function.
        Scope − They are local to the block.
        Default value − Default initialized value is Zero.
        Lifetime − Till the end of the execution of the program.
        
 register
 Register variables tell the compiler to store the variable in CPU register instead of memory. 
 Frequently used variables are kept in registers and they have faster accessibility. We can never get the addresses of these variables.
        Scope − They are local to the function.
        Default value − Default initialized value is the garbage value..
        Lifetime − Till the end of the execution of the block in which it is defined.

