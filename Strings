strcmp()
#include <stdio.h>
#include <string.h>

int main(){
    char str1[] = "Includehelp", str2[] = "includehelp", str3[] = "Includehelp";
    int res = 0, cmp = 0;

    // Compares string1 and string2 and return the difference
    // of first unmatched character in both of the strings
    // unless a '\0'(null) character is reached.
    res = strcmp(str1, str2);

    if (res == 0)
        printf("\n %s and %s are equal\n\n", str1, str2);
    else
        printf("\n %s and %s are not equal\n\n", str1, str2);

    // Compares string1 and string3 and return the difference
    // of first unmatched character in both of the strings
    // unless a '\0'(null) character is reached.
    cmp = strcmp(str1, str3);

    if (cmp == 0)
        printf(" %s and %s are equal\n\n", str1, str3);
    else
        printf(" %s and %s are not equal\n\n", str1, str3);

    return 0;
}
======================================================================================================================
own strcmp
#include<stdio.h>
int main()
{
    char s1[20],s2[20];
int c;
    scanf("%s %s",s1,s2);
    c =stringCompare(s1,s2);
    
    if(c==1)
    printf("passed");
    else
    printf("failed");
    return 0;
}
int stringCompare(char mj1[], char mj2[])  // function definition
{
    int i = 0, flag = 0;
    while(mj1[i] != '\0' && mj2[i] != '\0') // until atleast one string ends
    {
        /*
            Even if they differ by a single character, 
            don't iterate further
        */
        if(mj1[i] != mj2[i]) 
        {
            flag = 1;
            break;
        }
        i++;
    }

    /*
        If all the characters are sequentially same as well as 
        both strings have ended
    */
    if(flag == 0 && mj1[i] == '\0' && mj2[i] == '\0')
        return 1;
    else
        return 0;
}=======================================================================================================================
memset function():memset() is used to fill a block of memory with a particular value., memset works character by character

void *memset(void *ptr, int x, size_t n);
ex:
// C program to demonstrate working of memset() 
#include <stdio.h> 
#include <string.h> 

int main() 
{ 
	char str[50] = "GeeksForGeeks is for programming geeks."; 
	printf("\nBefore memset(): %s\n", str); 

	// Fill 8 characters starting from str[13] with '.' 
	memset(str + 13, '.', 8*sizeof(char)); 

	printf("After memset(): %s", str); 
	return 0; 
} 
op:
Before memset(): GeeksForGeeks is for programming geeks.
After memset(): GeeksForGeeks........programming geeks.
============================================================================================================================
Coverat a string into number:
---------------------------
First extract characters from left bracket '(' using strchr() function.

char *name="The Matrix(1999)";
char *ps;
ps=strchr(name,'(');
Then add each character within brackets () to an char array

char y[5]=""; int  p;
for (p=1;p<strlen(ps+1);p++) {
   y[p-1]=ps[p];
}
y[4]='\0';
Lastly convert resultant string to integer using atoi() function

year=atoi(y);
printf("year=%d",year);
===============================================================================================================================
In the program, 'a' is used instead of 97 and 'z' is used instead of 122. Similarly, 'A' is used instead of 65 and 'Z' is used instead of 90.
Convert to upper case of letters
#include <stdio.h>
#include <string.h>
int main() {
   char s[100];
   int i;
   printf("\nEnter a string : ");
   //gets(s);
  
   for (i = 0; s[i]!='\0'; i++) {
      if(s[i] >= 'a' && s[i] <= 'z') {
         s[i] = s[i] -32;
      }
   }
   printf("\nString in Upper Case = %s", s);
   return 0;
}
============================================================================================================================================
