Function pointers in C
Let's start with a basic function which we will be pointing to:

int addInt(int n, int m) {
    return n+m;
}
First thing, let's define a pointer to a function which receives 2 ints and returns an int:

int (*functionPtr)(int,int);
Now we can safely point to our function:

functionPtr = &addInt;
Now that we have a pointer to the function, let's use it:

int sum = (*functionPtr)(2, 3); // sum == 5
Passing the pointer to another function is basically the same:

int add2to3(int (*functionPtr)(int, int)) {
    return (*functionPtr)(2, 3);
}

example:


void function()
{
printf("hello world");
}

void (*function_ptr)();

void (*function_ptr)() = function;
//now call the function ptr what it will print

void (*function_ptr)();   // we can call function pointer with syntax and without function_ptr(); also works after assigning
============================================================================================================================
example 2:


void substarct(int x,int y);
{
  int z= x-y;
  printf(" values is %d",z);
  
 }
 
 void(* fun_substartion)(int,int)= sustract;
 
 fun_substarction(10,20);   // or (*fun_substraction)(10,20);
 
 ===========================================================================================================================
 example 3 :
 
 int substarct(int x,int y);
{
  return x-y;
 }
 
 int (*fun_substraction)(int,int) = substraction;
 
 int y = (*fun_substartion)(10,20);
 
 =============================================================================================================================
